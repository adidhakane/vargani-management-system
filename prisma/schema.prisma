// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resident {
  id          Int      @id @default(autoincrement())
  buildingNo  String   @map("building_no")
  flatNo      String   @map("flat_no")
  name        String
  contactNo   String?  @map("contact_no")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  receipts    Receipt[]

  @@unique([buildingNo, flatNo])
  @@map("residents")
}

model Receipt {
  id              Int      @id @default(autoincrement())
  buildingNo      String   @map("building_no")
  flatNo          String   @map("flat_no")
  amount          Decimal  @db.Decimal(10, 2)
  name            String?
  contactNo       String?  @map("contact_no")
  paymentMode     String   @default("cash") @map("payment_mode") // "cash" or "online"
  dateTime        DateTime @default(now()) @map("date_time")
  addToWhatsApp   Boolean  @default(false) @map("add_to_whatsapp") // New field for WhatsApp group feature
  whatsAppStatus  String?  @map("whatsapp_status") // "added", "invited", "failed", etc.
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  resident    Resident @relation(fields: [buildingNo, flatNo], references: [buildingNo, flatNo])

  @@map("receipts")
}

// WhatsApp Group Configuration
model WhatsAppConfig {
  id          Int      @id @default(autoincrement())
  groupName   String   @map("group_name")
  groupId     String?  @map("group_id") // WhatsApp Group ID
  inviteLink  String?  @map("invite_link") // Group invite link
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("whatsapp_configs")
}

// Authentication models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For credentials login
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("pending") // "pending", "approved", "admin"
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
